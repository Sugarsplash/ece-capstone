#include "lib/timers.sblib"
#include "flood.sb"
#include "rtc.sb"
#include "temperature.sb"
#include "rain.sb"
#include "soil.sb"

' UUIDs
#define UUID_BASE               "\30\d1\00\00\a6\ff\4f\2f\8a\2f\a2\67\a2\db\e3\20"
#define UUID_SERVICE            0xBEEF
#define UUID_DATE               0x000A
#define UUID_TIME               0x000B
#define UUID_AREA               0x000C
#define UUID_FLOOD              0x000D
#define UUID_LATITUDE           0x000E
#define UUID_TEMP               0x001A
#define UUID_SOIL               0x001B
#define UUID_RAIN               0x001C
#define UUID_FLOW               0x001D
#define UUID_SENSOR_SIG         0x001E
#define UUID_HIST_SIG           0x0020
#define UUID_HIST               0x0021
#define UUID_HIST_SIZE          0x0022


' Device Info for BLE
#define DEVICE_NAME             "Smart Irrigation"
#define DEVICE_NAME_WRITABLE    FALSE
#define DEVICE_APPEARANCE       512

' Advertisement settings (all in ms)
#define ADVERT_TYPE             0       ' Accept conncetions
#define ADVERT_INTERVAL         500     ' Time between advertise packets on advertise channels
#define ADVERT_TIMEOUT          0       ' No timeout

' Connection settings (ms)
#define MIN_CONN_INTERVAL       7500
#define MAX_CONN_INTERVAL       100000
#define SLAVE_LATENCY           0
#define CONN_SUP_TIMEOUT        4000000

dim ble_result
dim device_name$
dim handle_service          ' Handle for service
dim handle_date             ' Handle for date
dim handle_time             ' Handle for time
dim handle_area             ' Handle for area
dim handle_flood            ' Handle for flood signal
dim handle_latitude         ' Handle for latitude
dim handle_temp             ' Handle for temperature sensor data
dim handle_soil             ' Handle for soil moisture sensor data
dim handle_rain             ' Handle for rain sensor data
dim handle_flow             ' Handle for flow signal
dim handle_sensor_sig       ' Handle for sensor sampling signal
dim handle_hist_sig         ' Handle for history signal
dim handle_hist             ' Handle for history data
dim handle_hist_size        ' Handle for history size
dim handle_service_uuid     ' Service UUID

device_name$ = DEVICE_NAME

dim history_index


SUB service_create()
    dim uuid_base$ : uuid_base$ = UUID_BASE

    dim handle_uuid_base : handle_uuid_base = BleHandleUuid128(uuid_base$)

    handle_service_uuid = BleHandleUuidSibling(handle_uuid_base,UUID_SERVICE)

    dim val_init$ : val_init$="0"

    dim result2, result3

    ' Create service
    ble_result = BleServiceNew(1, handle_service_uuid, handle_service)
    if ble_result != 0 then
        print "\nError: service_create() -> BleServiceNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Initialize date characteristic - Read/Write - 6 bytes (MMDDYY)
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_DATE)), BleAttrMetaData(1,1,6,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_date)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize time characteristic - Read/Write - 6 bytes (HHMMSS)
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_TIME)), BleAttrMetaData(1,1,6,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_time)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize area characteristic - Read/Write - 6 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_AREA)), BleAttrMetaData(1,1,6,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_area)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize flood characteristic - Read/Write - 1 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_FLOOD)), BleAttrMetaData(1,1,1,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_flood)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize latitude characteristic - Read/Write - 2 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_LATITUDE)), BleAttrMetaData(1,1,5,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_latitude)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize temperature sensor characteristic - Read/Write - 3 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_TEMP)), BleAttrMetaData(1,1,3,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_temp)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize soil moisture sensor characteristic - Read/Write - 4 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_SOIL)), BleAttrMetaData(1,1,4,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_soil)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize rain sensor characteristic - Read/Write - 4 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_RAIN)), BleAttrMetaData(1,1,4,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_rain)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize flow signal characteristic - Read/Write - 1 byte
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_FLOW)), BleAttrMetaData(1,1,1,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_flow)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize sensor sampling signal characteristic - Read/Write - 1 byte
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_SENSOR_SIG)), BleAttrMetaData(1,1,1,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_sensor_sig)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize history signal characteristic - Read/Write - 1 byte
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_HIST_SIG)), BleAttrMetaData(1,1,1,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_hist_sig)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize history data characteristic - Read/Write - 6 byte
    ble_result = BleCharNew(0x2A, BleHandleUuidSibling(handle_uuid_base,(UUID_HIST)), BleAttrMetaData(1,1,6,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_hist)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize history size characteristic - Read/Write - 2 bytes
    ble_result = BleCharNew(0x1A, BleHandleUuidSibling(handle_uuid_base,(UUID_HIST_SIZE)), BleAttrMetaData(1,1,2,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_hist_size)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Commit service to the GATT table
    ble_result = BleServiceCommit(handle_service)
    if ble_result != 0 then
        print "\nError: service_create() -> BleServiceCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB


SUB advert_report_create()
    dim report_advert$, report_scan$

    ' Initialize advert report
    ble_result = BleAdvRptInit(report_advert$, 2, 0, 0)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptInit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Initialize scan report
    ble_result = BleScanRptInit(report_scan$)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleScanRptInit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Add local name to scan report
    ble_result = BleAdvRptAppendAD(report_scan$, 0x09, device_name$)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptAppendAD()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Add service UUID to advert report
    ble_result = BleAdvRptAddUuid128(report_advert$, handle_service_uuid)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptAddUuid128()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Commit the reports to stack
    ble_result = BleAdvRptsCommit(report_advert$, report_scan$)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptsCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

SUB ble_advertise()
    dim peer_address$ : peer_address$ = "" ' Unused but necessary

    ble_result = BleAdvertStart(ADVERT_TYPE, peer_address$, ADVERT_INTERVAL, ADVERT_TIMEOUT, 0)
    if ble_result != 0 then
        print "\nError: advert_start() -> BleAdvertStart()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    print "\n### Advertising ###"
ENDSUB


SUB ble_init()
    service_create()

    ble_result = BleGapSvcInit(device_name$, DEVICE_NAME_WRITABLE, DEVICE_APPEARANCE, MIN_CONN_INTERVAL, MAX_CONN_INTERVAL, CONN_SUP_TIMEOUT, SLAVE_LATENCY)
    if ble_result != 0 then
        print "\nError: init() -> BleGapSvcInit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    advert_report_create()
ENDSUB

SUB ble_update_temp(value$)
    ble_result = BleCharValueWrite(handle_temp, value$)
    if ble_result != 0 then
        print "\nError: ble_update_temp() -> BleCharValueWrite()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

SUB ble_update_soil(value$)
    ble_result = BleCharValueWrite(handle_soil, value$)
    if ble_result != 0 then
        print "\nError: ble_update_soil() -> BleCharValueWrite()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

SUB ble_update_rain(value$)
    ble_result = BleCharValueWrite(handle_rain, value$)
    if ble_result != 0 then
        print "\nError: ble_update_rain() -> BleCharValueWrite()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

SUB ble_update_flow(value$)
    ble_result = BleCharValueWrite(handle_flow, value$)
    if ble_result != 0 then
        print "\nError: ble_update_flow() -> BleCharValueWrite()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

SUB ble_update_hist_size(value$)
    ble_result = bleCharValueNotify(handle_hist_size, value$)
    if ble_result != 0 then
        print "\nError: ble_update_hist_size() -> BleCharValueNotify()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

SUB sampleSensors()

    PRINT "\nsampleSensors(): Sampling\n"
    
    // Sensor values
    DIM temperature : temperature = 0
    DIM soil_moisture : soil_moisture = 0
    DIM rain : rain = 0

    // Turn on sensors
    GpioWrite(SENSORS_ENABLE, HIGH)

    //wait for sensors to stabilize
    DIM x : x = 10000
    WHILE x > 0
        x = x - 1
    ENDWHILE

    // Sample sensors
    temperature = temp_read()
    rain = rain_analog_read()
    soil_moisture = soil_read()

    //Log latest sample to ble characteristics
    DIM temperature_string$
    SPRINT #temperature_string$, temperature
    ble_update_temp(temperature_string$)
    
    DIM rain_string$
    SPRINT #rain_string$, rain
    ble_update_rain(rain_string$)
    
    DIM soil_string$
    SPRINT #soil_string$, soil_moisture
    ble_update_soil(soil_string$)
   
ENDSUB

FUNCTION globalConfig()
	// Get strings from config characteristics and convert to integer
	DIM hour_string$ : hour_string$ = MID$(config_time$, 0, 2)
	hours = STRVALDEC(hour_string$)

	DIM min_string$ : min_string$ = MID$(config_time$, 2, 2)
	minutes = STRVALDEC(min_string$)

	DIM sec_string$ : sec_string$ = MID$(config_time$, 4, 2)
	seconds = STRVALDEC(sec_string$)

	DIM month_string$ : month_string$ = MID$(config_date$, 0, 2)
	month = STRVALDEC(month_string$)

	DIM day_string$ : day_string$ = MID$(config_date$, 2, 2)
	day = STRVALDEC(day_string$)
	 
	DIM year_string$ : year_string$ = MID$(config_date$, 4, 2)
	year = STRVALDEC(year_string$)

	latitude = STRVALDEC(config_latitude$)
	area = STRVALDEC(config_area$)
	
	Dim ret : ret = setRTC(hours, minutes, seconds, month, day, year)
	
    //Start timers
    TimerStart(TIMER_SAMPLE, ONE_HOUR, ONESHOT)
    TimerStart(TIMER_CALCULATE, ONE_DAY, ONESHOT)
ENDFUNC ret

SUB historySend()
    if (dp == 0) then
        Print "\nhistorySend(): No history to send"
        exitsub
    endif
    
    Print "\n# of data items to send to phone: "; dp
    
    // Index must be offset so that it starts sending from dataArray[0]
    history_index = dp
    Dim i : i = dp - history_index
    history_index = history_index - 1
    
    Dim data_str$
    SPRINT #data_str$, dataArray[i]
    
    ble_result = BleCharValueIndicate(handle_hist, data_str$)
    if ble_result != 0 then
        print "\nError: historySend() -> BleCharValueWrite()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
ENDSUB

FUNCTION handler_char_val(handle_char, offset, len)
    dim val$
	DIM result
	Dim read_val$
	Dim write_val$

    ' Get characteristic value
    ble_result = BleCharValueRead(handle_char, read_val$)
    if ble_result != 0 then
        print "\nError: handler_char_val() -> BleCharValueRead()"
        print "\nCode: 0x"; integer.h' ble_result
        EXITFUNC ble_result
    endif

    if (handle_char == handle_flood) then
        // Flood signal received, do the flood procedure
        flood()
        
        // Return flood signal value back to 0
        write_val$ = "0"
        ble_result = BleCharValueWrite(handle_flood, write_val$)
        if ble_result != 0 then
            print "\nError: handler_char_val() -> BleCharValueWrite()"
            print "\nCode: 0x"; integer.h' ble_result
            EXITFUNC ble_result
        endif
    elseif (handle_char == handle_sensor_sig) then
        // Sensor sampling signal received, sensor samples immediately
        sampleSensors()
        
        // Return sensor sample signal value back to 0
        write_val$ = "0"
        ble_result = BleCharValueWrite(handle_sensor_sig, write_val$)
        if ble_result != 0 then
            print "\nError: handler_char_val() -> BleCharValueWrite()"
            print "\nCode: 0x"; integer.h' ble_result
            EXITFUNC ble_result
        endif
    elseif (handle_char == handle_area) then
        config_area$ = read_val$
        ble_result = 1
    elseif (handle_char == handle_time) then
        config_time$ = read_val$
        ble_result = 1
    elseif (handle_char == handle_date) then
        config_date$ = read_val$
        ble_result = 1
    elseif (handle_char == handle_latitude) then
        config_latitude$ = read_val$
        ble_result = globalConfig()
    elseif (handle_char == handle_hist_sig) then
        historySend()
        
        // Return history signal value back to 0
        write_val$ = "0"
        ble_result = BleCharValueWrite(handle_hist_sig, write_val$)
        if ble_result != 0 then
            print "\nError: handler_char_val() -> BleCharValueWrite()"
            print "\nCode: 0x"; integer.h' ble_result
            EXITFUNC ble_result
        endif
    endif
ENDFUNC ble_result

FUNCTION handler_ble_msg(ByVal id_msg, ByVal handle_connection)
    IF id_msg == 1 then
        print "\n\n### Disconnected ###\n"
        ble_advertise()
    elseif id_msg == 0 then
        print "\n### Connected ###"
    endif
ENDFUNC 1

FUNCTION handler_adv_timeout()
    print "\n### Advertising Timeout ###"
ENDFUNC 1

FUNCTION handler_ble_ind(ByVal handle_char)   
    Dim i : i = dp - history_index
    history_index = history_index - 1
    
    if (history_index == -1) then
        print "\nAll data sent to phone"
        resetDataArray()
        EXITFUNC 1
    endif
    
    Dim data_str$
    
    SPRINT #data_str$, dataArray[i]
    
    ble_result = BleCharValueIndicate(handle_hist, data_str$)
    if ble_result != 0 then
        print "\nError: handler_ble_ind() -> BleCharValueWrite()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDFUNC 1
