' Bool
#define TRUE    1
#define FALSE   0

' UUIDs
#define UUID_BASE               "\30\d1\00\00\a6\ff\4f\2f\8a\2f\a2\67\a2\db\e3\20"
#define UUID_SERVICE            0xBEEF
#define UUID_PHONE_DATE         0x000A
#define UUID_PHONE_LATITUDE     0x000B
#define UUID_PHONE_AREA         0x000C

' Device Info for BLE
#define DEVICE_NAME             "Smart Irrigation"
#define DEVICE_NAME_WRITABLE    FALSE
#define DEVICE_APPEARANCE       512

' GPIO Pins
#define LED_CONNECTION          2   ' LED when connected to device
#define LED_ADVERTISING         11  ' LED  when advertising
#define BUTTON_ADVERTISE        9   ' Button press starts advertise session

' Advertisement settings (all in ms)
#define ADVERT_TYPE             0
#define ADVERT_INTERVAL         250
#define ADVERT_TIMEOUT          10000

' Connection settings (ms)
#define MIN_CONN_INTERVAL       7500
#define MAX_CONN_INTERVAL       100000
#define SLAVE_LATENCY           0
#define CONN_SUP_TIMEOUT        4000000


dim result
dim device_name$
dim handle_service          ' Handle for service
dim handle_phone_date       ' Handle for date characteristic
dim handle_phone_lat        ' Handle for latitude characteristic
dim handle_phone_area       ' Handle for area characteristic
dim handle_service_uuid     ' Service UUID

device_name$ = DEVICE_NAME

SUB delay(ms)
    dim i : i = GetTickCount()
    while GetTickSince(i) < ms
    endwhile
ENDSUB


SUB service_create()
    dim uuid_base$ : uuid_base$ = UUID_BASE

    dim handle_uuid_base : handle_uuid_base = BleHandleUuid128(uuid_base$)

    handle_service_uuid = BleHandleUuidSibling(handle_uuid_base,UUID_SERVICE)

    dim val_init$ : val_init$="\00"

    dim result2, result3

    ' Create service
    result = BleServiceNew(1, handle_service_uuid, handle_service)
    if result != 0 then
        print "\nError: service_create() -> BleServiceNew()"
        print "\nCode: 0x"; integer.h' result
    endif

    ' Initialize date characteristic - Read/Write
    result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_PHONE_DATE)), BleAttrMetaData(1,1,2,1,result2), 0, 0)
    if (result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' result
    endif

    result = BleCharCommit(handle_service, val_init$, handle_phone_date)
    if result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' result
    endif

    ' Initialize latitude Characteristic - Read/Write
    result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_PHONE_LATITUDE)), BleAttrMetaData(1,1,2,1,result2), 0, 0)
    if (result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' result
    endif

    result = BleCharCommit(handle_service, val_init$, handle_phone_lat)
    if result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' result
    endif

    ' Initialize area Characteristic - Read/Write
    result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_PHONE_AREA)), BleAttrMetaData(1,1,2,1,result2), 0, 0)
    if (result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' result
    endif

    result = BleCharCommit(handle_service, val_init$, handle_phone_area)
    if result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' result
    endif

    ' Commit service to the GATT table
    result = BleServiceCommit(handle_service)
    if result != 0 then
        print "\nError: service_create() -> BleServiceCommit()"
        print "\nCode: 0x"; integer.h' result
    endif
ENDSUB


SUB advert_report_create()
    dim report_advert$, report_scan$

    ' Initialize advert report
    result = BleAdvRptInit(report_advert$, 2, 0, 0)
    if result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptInit()"
        print "\nCode: 0x"; integer.h' result
    endif

    ' Initialize scan report
    result = BleScanRptInit(report_scan$)
    if result != 0 then
        print "\nError: advert_report_create() -> BleScanRptInit()"
        print "\nCode: 0x"; integer.h' result
    endif

    ' Add local name to scan report
    result = BleAdvRptAppendAD(report_scan$,0x09,device_name$)
    if result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptAppendAD()"
        print "\nCode: 0x"; integer.h' result
    endif

    ' Add service UUID to advert report
    result = BleAdvRptAddUuid128(report_advert$, handle_service_uuid)
    if result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptAddUuid128()"
        print "\nCode: 0x"; integer.h' result
    endif

    ' Commit the reports to stack
    result = BleAdvRptsCommit(report_advert$,report_scan$)
    if result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptsCommit()"
        print "\nCode: 0x"; integer.h' result
    endif
ENDSUB


SUB advert_start()
    dim peer_address$ : peer_address$ = "" ' Unused but necessary

    result = BleAdvertStart(ADVERT_TYPE, peer_address$, ADVERT_INTERVAL, ADVERT_TIMEOUT, 0)
    if result != 0 then
        print "\nError: advert_start() -> BleAdvertStart()"
        print "\nCode: 0x"; integer.h' result
    endif

    print "\n### Advertising ###"
    GpioWrite(LED_ADVERTISING, 1)
ENDSUB


SUB gpio_init()
    'Set LEDs as outputs, initially low
    result = GpioSetFunc(LED_CONNECTION, 2, 0)
    if result != 0 then
        print "\nError: gpio_init() -> GpioSetFunc(LED_CONNECTION)"
        print "\nCode: 0x"; integer.h' result
    endif

    GpioWrite(LED_CONNECTION, 0)

    result = GpioSetFunc(LED_ADVERTISING, 2, 0)
    if result != 0 then
        print "\nError: gpio_init() -> GpioSetFunc(LED_ADVERTISING)"
        print "\nCode: 0x"; integer.h' result
    endif

    GpioWrite(LED_ADVERTISING, 0)

    ' Button 9, high->low transition
    result = GpioAssignEvent(0, 9, 1)
    if result != 0 then
        print "\nError: gpio_init() -> GpioAssignEvent()"
        print "\nCode: 0x"; integer.h' result
    endif

    ' Set button as input pulled high
    result = GpioSetFunc(BUTTON_ADVERTISE, 1, 2)
    if result != 0 then
        print "\nError: gpio_init() -> GpioSetFunc()"
        print "\nCode: 0x"; integer.h' result
    endif
ENDSUB


SUB init()
    service_create()

    result = BleGapSvcInit(device_name$, DEVICE_NAME_WRITABLE, DEVICE_APPEARANCE, MIN_CONN_INTERVAL, MAX_CONN_INTERVAL, CONN_SUP_TIMEOUT, SLAVE_LATENCY)
    if result != 0 then
        print "\nError: init() -> BleGapSvcInit()"
        print "\nCode: 0x"; integer.h' result
    endif

    advert_report_create()

    gpio_init()
ENDSUB


FUNCTION handler_char_val(handle_char, offset, len)
    dim val$

    ' Get characteristic value
    result = BleCharValueRead(handle_char, val$)
    if result != 0 then
        print "\nError: handler_char_val() -> BleCharValueRead()"
        print "\nCode: 0x"; integer.h' result
    endif

    if handle_char == handle_phone_date then
        print "\nDate: "; val$
    elseif handle_char == handle_phone_lat then
        print "\nLatitude: "; val$
    elseif handle_char == handle_phone_area then
        print "\nArea: "; val$
    endif
ENDFUNC 1


FUNCTION handler_ble_msg(ByVal id_msg, ByVal handle_connection)
    IF id_msg == 1 then
        print "\n\n### Disconnected ###\n"
        GpioWrite(LED_CONNECTION, 0)
    elseif id_msg == 0 then
        print "\n### Connected ###"
        GpioWrite(LED_ADVERTISING, 0)
        GpioWrite(LED_CONNECTION, 1)
    endif
ENDFUNC 1

FUNCTION handler_adv_timeout()
    print "\n### Advertising Timeout ###"
    GpioWrite(LED_ADVERTISING, 0)
ENDFUNC 1


FUNCTION handler_gpio()
    ONEVENT EVDETECTCHAN0 disable

    delay(150)
    advert_start()

    ONEVENT EVDETECTCHAN0 CALL handler_gpio
ENDFUNC 1


init()

ONEVENT EVBLE_ADV_TIMEOUT   CALL handler_adv_timeout
ONEVENT EVCHARVAL           CALL handler_char_val
ONEVENT EVBLEMSG            CALL handler_ble_msg
ONEVENT EVDETECTCHAN0       CALL handler_gpio

WAITEVENT
