#include "lib/globals.sblib"
#include "flood.sb"

' UUIDs
#define UUID_BASE               "\30\d1\00\00\a6\ff\4f\2f\8a\2f\a2\67\a2\db\e3\20"
#define UUID_SERVICE            0xBEEF
#define UUID_DATE               0x000A
#define UUID_TIME               0x000B
#define UUID_AREA               0x000C
#define UUID_FLOOD              0x000D
#define UUID_LATITUDE           0x000E
#define UUID_TEMP               0x001A
#define UUID_SOIL               0x001B
#define UUID_RAIN               0x001C

' Device Info for BLE
#define DEVICE_NAME             "Smart Irrigation"
#define DEVICE_NAME_WRITABLE    FALSE
#define DEVICE_APPEARANCE       512

' Advertisement settings (all in ms)
#define ADVERT_TYPE             0       ' Accept conncetions
#define ADVERT_INTERVAL         500     ' Time between advertise packets on advertise channels
#define ADVERT_TIMEOUT          0       ' No timeout

' Connection settings (ms)
#define MIN_CONN_INTERVAL       7500
#define MAX_CONN_INTERVAL       100000
#define SLAVE_LATENCY           0
#define CONN_SUP_TIMEOUT        4000000

dim ble_result
dim device_name$
dim handle_service          ' Handle for service
dim handle_date             ' Handle for date
dim handle_time             ' Handle for time
dim handle_area             ' Handle for area
dim handle_flood            ' Handle for flood signal
dim handle_latitude         ' Handle for latitude
dim handle_temp             ' Handle for temperature sensor data
dim handle_soil             ' Handle for soil moisture sensor data
dim handle_rain             ' Handle for rain sensor data
dim handle_service_uuid     ' Service UUID

device_name$ = DEVICE_NAME


SUB service_create()
    dim uuid_base$ : uuid_base$ = UUID_BASE

    dim handle_uuid_base : handle_uuid_base = BleHandleUuid128(uuid_base$)

    handle_service_uuid = BleHandleUuidSibling(handle_uuid_base,UUID_SERVICE)

    dim val_init$ : val_init$="\00"

    dim result2, result3

    ' Create service
    ble_result = BleServiceNew(1, handle_service_uuid, handle_service)
    if ble_result != 0 then
        print "\nError: service_create() -> BleServiceNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Initialize date characteristic - Read/Write - 6 bytes (MMDDYY)
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_DATE)), BleAttrMetaData(1,1,6,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_date)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize time characteristic - Read/Write - 6 bytes (HHMMSS)
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_TIME)), BleAttrMetaData(1,1,6,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_time)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize area characteristic - Read/Write - 6 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_AREA)), BleAttrMetaData(1,1,6,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_area)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize flood characteristic - Read/Write - 1 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_FLOOD)), BleAttrMetaData(1,1,1,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_flood)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize latitude characteristic - Read/Write - 2 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_LATITUDE)), BleAttrMetaData(1,1,5,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_latitude)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize temperature sensor characteristic - Read/Write - 3 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_TEMP)), BleAttrMetaData(1,1,3,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_temp)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize soil moisture sensor characteristic - Read/Write - 4 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_SOIL)), BleAttrMetaData(1,1,4,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_soil)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
    
    ' Initialize rain sensor characteristic - Read/Write - 4 bytes
    ble_result = BleCharNew(0x0A, BleHandleUuidSibling(handle_uuid_base,(UUID_RAIN)), BleAttrMetaData(1,1,4,1,result2), 0, 0)
    if (ble_result != 0) || (result2 != 0) then
        print "\nError: service_create() -> BleCharNew()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ble_result = BleCharCommit(handle_service, val_init$, handle_rain)
    if ble_result != 0 then
        print "\nError: service_create() -> BleCharCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Commit service to the GATT table
    ble_result = BleServiceCommit(handle_service)
    if ble_result != 0 then
        print "\nError: service_create() -> BleServiceCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB


SUB advert_report_create()
    dim report_advert$, report_scan$

    ' Initialize advert report
    ble_result = BleAdvRptInit(report_advert$, 2, 0, 0)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptInit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Initialize scan report
    ble_result = BleScanRptInit(report_scan$)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleScanRptInit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Add local name to scan report
    ble_result = BleAdvRptAppendAD(report_scan$, 0x09, device_name$)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptAppendAD()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Add service UUID to advert report
    ble_result = BleAdvRptAddUuid128(report_advert$, handle_service_uuid)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptAddUuid128()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    ' Commit the reports to stack
    ble_result = BleAdvRptsCommit(report_advert$, report_scan$)
    if ble_result != 0 then
        print "\nError: advert_report_create() -> BleAdvRptsCommit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

SUB ble_advertise()
    dim peer_address$ : peer_address$ = "" ' Unused but necessary

    ble_result = BleAdvertStart(ADVERT_TYPE, peer_address$, ADVERT_INTERVAL, ADVERT_TIMEOUT, 0)
    if ble_result != 0 then
        print "\nError: advert_start() -> BleAdvertStart()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    print "\n### Advertising ###"
ENDSUB


SUB ble_init()
    service_create()

    ble_result = BleGapSvcInit(device_name$, DEVICE_NAME_WRITABLE, DEVICE_APPEARANCE, MIN_CONN_INTERVAL, MAX_CONN_INTERVAL, CONN_SUP_TIMEOUT, SLAVE_LATENCY)
    if ble_result != 0 then
        print "\nError: init() -> BleGapSvcInit()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    advert_report_create()
ENDSUB

SUB ble_update_temp(value$)
    ble_result = BleCharValueWrite(handle_temp, value$)
    if ble_result != 0 then
        print "\nError: handler_char_val() -> BleCharValueWrite()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

SUB ble_update_soil(value$)
    ble_result = BleCharValueWrite(handle_soil, value$)
    if ble_result != 0 then
        print "\nError: handler_char_val() -> BleCharValueWrite()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

SUB ble_update_rain(value$)
    ble_result = BleCharValueWrite(handle_rain, value$)
    if ble_result != 0 then
        print "\nError: handler_char_val() -> BleCharValueWrite()"
        print "\nCode: 0x"; integer.h' ble_result
    endif
ENDSUB

FUNCTION handler_char_val(handle_char, offset, len)
    dim val$

    ' Get characteristic value
    ble_result = BleCharValueRead(handle_char, val$)
    if ble_result != 0 then
        print "\nError: handler_char_val() -> BleCharValueRead()"
        print "\nCode: 0x"; integer.h' ble_result
    endif

    if (handle_char == handle_area) then
        config_area$ = val$
    elseif (handle_char == handle_time) then
        config_time$ = val$
    elseif (handle_char == handle_date) then
        config_date$ = val$
    elseif (handle_char == handle_flood) then
        // Flood signal received, do the flood procedure
        flood()
        
        // Return flood signal value back to 0
        Dim value$ : value$ = "0"
        ble_result = BleCharValueWrite(handle_flood, value$)
        if ble_result != 0 then
            print "\nError: handler_char_val() -> BleCharValueWrite()"
            print "\nCode: 0x"; integer.h' ble_result
        endif
    elseif (handle_char == handle_latitude) then
        config_latitude$ = val$
    endif
ENDFUNC 1


FUNCTION handler_ble_msg(ByVal id_msg, ByVal handle_connection)
    IF id_msg == 1 then
        print "\n\n### Disconnected ###\n"
        ble_advertise()
    elseif id_msg == 0 then
        print "\n### Connected ###"
    endif
ENDFUNC 1

FUNCTION handler_adv_timeout()
    print "\n### Advertising Timeout ###"
ENDFUNC 1