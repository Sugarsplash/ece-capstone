#include "lib/pin_defs.sblib"
#include "lib/gpio.sblib"
#include "lib/timers.sblib"
#include "ble.sb"
#include "irrigate.sb"
#include "rain.sb"
#include "soil.sb"
#include "temperature.sb"
#include "algorithm.sb"

DIM result

' Configure all sensor pins as inputs
result = GpioSetFunc(TEMP_DATA, ANALOG_IN, ADC_10BIT)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - TEMP_DATA\n"
ENDIF

result = GpioSetFunc(SOIL_DATA, ANALOG_IN, ADC_10BIT)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - SOIL_DATA\n"
ENDIF

result = GpioSetFunc(RAIN_DATA_A, ANALOG_IN, ADC_10BIT)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - RAIN_DATA_A\n"
ENDIF

result = GpioSetFunc(RAIN_DATA_D, DIGITAL_IN, NO_PULL)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - RAIN_DATA_D\n"
ENDIF

result = GpioSetFunc(FLOW_DATA, DIGITAL_IN, NO_PULL)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - RAIN_DATA_D\n"
ENDIF


' Configure transistor-enabling pins as outputs
result = GpioSetFunc(SENSORS_ENABLE, DIGITAL_OUT, INIT_LOW)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - SENSORS_ENABLE\n"
ENDIF

result = GpioSetFunc(SOL_ENABLE, DIGITAL_OUT, INIT_LOW)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - SOL_ENABLE\n"
ENDIF


' Initialize BLE services and characteristics
ble_init()


' Sample sensors, update their respective variables for later ETO calculation,
' and write to the sensor characteristic
' Frequency: 1/hour
FUNCTION timer_sample()
    
    ' ** Sample sensors
    
    ' ** Write to characteristic
    
    TimerStart(TIMER_SAMPLE, ONE_HOUR, ONESHOT)
    
ENDFUNC 1


' Calculate whether watering is needed and do so if needed
' Frequency: 1/day
FUNCTION timer_calculate()
    
    // Get strings from config characteristics and convert to integer
    DIM hour_string$ : hour_string$ = MID$(config_time$, 0, 2)
    hours = STRVALDEC(hour_string$)
    
    DIM min_string$ : min_string$ = MID$(config_time$, 2, 2)
    minutes = STRVALDEC(min_string$)
    
    DIM sec_string$ : sec_string$ = MID$(config_time$, 4, 2)
    seconds = STRVALDEC(sec_string$)
    
    DIM month_string$ : month_string$ = MID$(config_date$, 0, 2)
    month = STRVALDEC(month_string$)
    
    DIM day_string$ : day_string$ = MID$(config_date$, 2, 2)
    day = STRVALDEC(day_string$)
     
    DIM year_string$ : year_string$ = MID$(config_date$, 4, 2)
    year = STRVALDEC(year_string$)
    
    latitude = STRVALDEC(config_latitude$)
    
    area = STRVALDEC(config_area$)
       
    flood_signal = STRVALDEC(config_flood$)

    ' Do calculations
    //********DIM Tmax
    //********DIM Tmin
    //********DIM DayOfYear

    DIM mm
    DIM volumeLiters
    DIM volumePrecision
    
    DIM Rotations_needed

    mm = E_to(Tmax, Tmin, DayOfYear, latitude)

    volumeLiters = mm * area * 1000

    volumePrecision = volumeLiters * 10000

    Rotations_needed = volumePrecision / LitersToRotations

    //Do not bother watering until a gallon or more of water is necessary
    IF (Rotations_needed > 1200) THEN
        irrigate(Rotations_needed)
    ELSE
        ' ** Save the Rotations_needed (Global var?)
    ENDIF 
    
    TimerStart(TIMER_CALCULATE, ONE_DAY, ONESHOT)

ENDFUNC 1


' Configure BLE interrupt handlers
ONEVENT EVBLE_ADV_TIMEOUT   CALL handler_adv_timeout
ONEVENT EVCHARVAL           CALL handler_char_val
ONEVENT EVBLEMSG            CALL handler_ble_msg

' Configure timer interrupt handlers
ONEVENT EVTMR0 CALL timer_sample
ONEVENT EVTMR1 CALL timer_calculate

' Begin advertising
ble_advertise()

' Start timers
TimerStart(TIMER_SAMPLE, ONE_HOUR, ONESHOT)
TimerStart(TIMER_CALCULATE, ONE_DAY, ONESHOT)

WHILE TRUE
    WAITEVENT
ENDWHILE