#include "lib/pin_defs.sblib"
#include "lib/gpio.sblib"
#include "history.sb"
#include "algorithm.sb"
#include "timers.sb"

DIM result

// Configure all sensor pins as inputs
result = GpioSetFunc(TEMP_DATA, ANALOG_IN, ADC_10BIT)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - TEMP_DATA\n"
ENDIF

result = GpioSetFunc(SOIL_DATA, ANALOG_IN, ADC_10BIT)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - SOIL_DATA\n"
ENDIF

result = GpioSetFunc(RAIN_DATA_A, ANALOG_IN, ADC_10BIT)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - RAIN_DATA_A\n"
ENDIF

result = GpioSetFunc(RAIN_DATA_D, DIGITAL_IN, NO_PULL)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - RAIN_DATA_D\n"
ENDIF

result = GpioSetFunc(FLOW_DATA, DIGITAL_IN, NO_PULL)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - RAIN_DATA_D\n"
ENDIF


// Configure transistor-enabling pins as outputs
result = GpioSetFunc(SENSORS_ENABLE, DIGITAL_OUT, INIT_LOW)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - SENSORS_ENABLE\n"
ENDIF

result = GpioSetFunc(SOL_ENABLE, DIGITAL_OUT, INIT_LOW)
IF result != 0 THEN
    PRINT "\nERROR: GpioSetFunc - SOL_ENABLE\n"
ENDIF


// Initialize BLE services and characteristics
ble_init()

//Configure BLE interrupt handlers
ONEVENT EVBLE_ADV_TIMEOUT   CALL handler_adv_timeout
ONEVENT EVCHARVAL           CALL handler_char_val
ONEVENT EVBLEMSG            CALL handler_ble_msg
ONEVENT EVCHARHVC           CALL handler_ble_ind

//Configure timer interrupt handlers
ONEVENT EVTMR0 CALL timer_sample
ONEVENT EVTMR1 CALL timer_calculate

//Begin advertising
ble_advertise()

WHILE TRUE
    WAITEVENT
ENDWHILE